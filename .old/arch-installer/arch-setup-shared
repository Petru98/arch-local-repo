#!/bin/bash

# Logging
LOG="./arch-setup.log"
TRACE="./arch-setup.trace"
echo -n '' > "$LOG"
echo -n '' > "$TRACE"

enable_script_logging() {
    exec  > >(tee -ia "$TRACE" "$LOG")
    exec 2> >(tee -ia "$TRACE" "$LOG" >&2)
}
disable_script_logging() {
    exec 1>&3 2>&4
}

exec 3>&1 4>&2
enable_script_logging

exec 19> "$TRACE"
export BASH_XTRACEFD=19
set -x


# Constants
True=$(true; echo $?)
False=$(false; echo $?)

Reset=$(tput sgr0)
Reverse=$(tput rev)
Bold=$(tput bold)
SUnderline=$(tput sgr 0 1)
RUnderline=$(tput sgr 0 0)

FRed=$(tput setaf 1)
FGreen=$(tput setaf 2)
FYellow=$(tput setaf 3)
FBlue=$(tput setaf 4)
FPurple=$(tput setaf 5)
FCyan=$(tput setaf 6)
FWhite=$(tput setaf 7)

BRed=$(tput setab 1)
BGreen=$(tput setab 2)
BYellow=$(tput setab 3)
BBlue=$(tput setab 4)
BPurple=$(tput setab 5)
BCyan=$(tput setab 6)
BWhite=$(tput setab 7)

# Functions
bool() {
    set +e
    [[ "$@" == $True ]]; return $?
    set -e
}
log() {
    echo "$@"
}
critical_error() {
    log "${Bold}${FWhite}${BRed}[X] CRITICAL: $*${Reset}" >&2
    exit 1
}
print_error() {
    log "${Bold}${FRed}[-] ERROR: $*${Reset}" >&2
}
print_warning() {
    log "${Bold}${FYellow}[!] WARNING: $*${Reset}" >&2
}
print_info() {
    log "${Bold}[+] INFO: $*${Reset}"
}
print_line_separator() {
    printf "#%.0s" $(seq 1 $(tput cols))
    log ""
}
print_title() {
    log "${Bold}"
    print_line_separator
    log "# $*"
    print_line_separator
    log -n "${Reset}"
}
run_editor() {
    disable_script_logging
    $EDITOR "$@"
    enable_script_logging
}

array_contains_element() {
    for x in "${@:2}" ; do [ "$x" == "$1" ] && break ; done
}
is_array() {
    declare -p "$1" 2> /dev/null | grep -q '^declare \-a'
}
check_variable() {
    local name="$1"
    local -n value="$name"
    if ! is_array "$name" ; then
        value=("$value")
    fi

    for i in "${value[@]}" ; do
        if ! array_contains_element "$i" "${@:2}" ; then
            critical_error "Value $i for variable $name is not one of: ${@:2}"
        fi
    done
}



# These are set during runtime (auto detection, user input etc.)
print_title "https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface"
print_info "Checking boot system."
if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple '*'Inc.' ]]; then
    modprobe -r -q efivars || true
else
    modprobe -q efivarfs
fi
if [[ -d "/sys/firmware/efi/" ]]; then
    if [[ $(mount | grep /sys/firmware/efi/efivars) == "" ]]; then
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
    fi
    UEFI=$True
    info "UEFI Mode detected."
else
    UEFI=$False
    info "BIOS Mode detected."
fi

ARCHI=$(uname -m)

WIRED_DEV=$(ip link | grep "ens\|eno\|enp" | awk '{print $2}'| sed 's/://' | sed '1!d')
WIRELESS_DEV=$(ip link | grep wlp | awk '{print $2}'| sed 's/://' | sed '1!d')
VIDEO_DRIVER=""

TRIM=$([[ $(hdparm -I /dev/sda 2> /dev/null | grep TRIM 2> /dev/null) != "" ]])
LUKS_DISK=""
LVM_DISK=""
BOOT_DISK=""



################
# Change these #
################
EDITOR="nano"

LINUX_VERSION="linux"
check_variable LINUX_VERSION "linux" "linux-lts" "linux-hardened" "linux-zen"

KEYMAPS=("us" "ro")               && check_variable KEYMAPS $(localectl list-keymaps)
LOCALES=("en_US" "ro_RO" "ja_JP") && check_variable LOCALES $(cat /etc/locale.gen | grep UTF-8 | sed '/@/d' | awk '{print $1}' | sed 's/\..*$//' | sed 's/#//g' | uniq)
TIMEZONE="Europe/Bucharest"       && check_variable TIMEZONE $(timedatectl list-timezones)
FALLBACK_NTP=""

HOSTNAME="archlinux"
PROXY=""
MIRRORLIST_URL="https://www.archlinux.org/mirrorlist/?country=RO&country=CH&use_mirror_status=on"
MIRRORLIST_AUTOMATIC_SORT=$False
MIRRORLIST_MANUAL_SORT=$True

#* EFI is used only when UEFI is detected
#* Mounting and swap files are relative to ROOT_MOUNTPOINT (e.g. "/efi" will actually be converted to "$ROOT_MOUNTPOINT/efi")
ROOT_MOUNTPOINT="/mnt"
EFI_MOUNTPOINT="/efi"
LUKS=$False
LVM=$False
FSTAB_MANUAL_EDIT=$True

# e.g. "sda1 ext4" to format the root partition and mount, or "sda1" to just mount
ROOT_PARTITION="vda2 ext4"

# e.g. "sda1"
SWAP_PARTITIONS=()

# e.g. "/path/to/swapfile 16G" to create a 16GiB swap file (see fallocate for suffixes), or "/path/to/swapfile" for size equal to RAM
SWAP_FILES=()

# e.g. "sda1 fat" to format and mount (format must be fat!), or "sda1" to just mount (useful if you have other operating systems already installed)
EFI_PARTITION="vda1"

# e.g. "sda1 /mnt ext4" to format and mount, or "sda1 /mnt" to just mount, or "sda1  ext4" (two spaces) to just format
OTHER_PARTITIONS=()

BOOTLOADER="Grub2" && check_variable BOOTLOADER "" "Grub2" "Syslinux" $(bool $UEFI && echo -n "Systemd" "rEFInd")
BOOTLOADER_AUTOMATIC_INSTALL=$True
MKINITCPIO_MANUAL_EDIT=$False

DESKTOPENV="cinnamon" && check_variable DESKTOPENV "" "cinnamon" "kde" # "Deepin" "Enlightenment" "GNOME" "LXQT" "Mate" "XFCE" "Budgie" "Awesome" "Fluxbox" "i3-wm" "i3-gaps" "OpenBox" "Xmonad"
DISPLAYMAN=""         && check_variable DISPLAYMAN "" "gdm" "lightdm" "sddm" "slim" "lxdm" "lxdm-gtk3"
KDE=$(array_contains_element "$DESKTOPENV" kde lxqt ; echo -n $?)

VIDEO_DRIVER=""
INSTALL_PROPRIETARY_GPU_DRIVERS=$True



#########
# Other #
#########
invalid_option() {
    print_error "Invalid option. Try again."
}
pause() {
    read -p "Press enter to continue..."
}
prompt() {
    log -n "$1" ; read $2
    if [[ $(eval echo -n \$$2) == "" ]]; then
        eval $2="$3"
    fi
}
prompt_bool() {
    local options=""
    local choice=""
    local default="$2"
    case "$default" in
        y*|Y*|0) default=0 ; options="[Y/n]" ;;
        n*|N*|1) default=1 ; options="[y/N]" ;;
        *) critical_error "prompt_bool: invalid default value" ;;
    esac
    while prompt "$1 $options " choice ; do
        case "$choice" in
            y*|Y*) return 0 ;;
            n*|N*) return 1 ;;
            '') return $default ;;
            *) invalid_option ;;
        esac
    done
}

is_package_installed() {
    pacman -Q "$@" &> /dev/null
}

check_internet_connection() {
    print_title "Network Setup - https://wiki.archlinux.org/index.php/Network_configuration"
    if [[ "$PROXY" != "" ]]; then
        export http_proxy=$PROXY
        export https_proxy=$PROXY
        export ftp_proxy=$PROXY
        echo "proxy = $PROXY" > "$HOME/.curlrc"
    fi

    print_info "Checking internet connection."
    while ! ping -q -w5 -c1 $(ip route | grep default | awk 'NR==1 {print $3}') &> /dev/null ; do
        print_warning "Internet connection not found."
        local connection_opts=("Wired Automatic" "Wired Manual" "Wireless")
        PS3="Select network configuration type (CTRL+D to skip): "
        select CONNECTION_TYPE in "${connection_opts[@]}"; do
            case "$REPLY" in
            1)
                systemctl start dhcpcd@$WIRED_DEV.service
                break
                ;;
            2)
                systemctl stop dhcpcd@$WIRED_DEV.service
                prompt "IP Address: " IP_ADDR
                prompt "Submask: " SUBMASK
                prompt "Gateway: " GATEWAY
                ip link set $WIRED_DEV up
                ip addr add $IP_ADDR/$SUBMASK dev $WIRED_DEV
                ip route add default via $GATEWAY
                run_editor /etc/resolv.conf
                break
                ;;
            3)
                iwctl
                break
                ;;
            *)
                invalid_option
                ;;
            esac
        done
    done
}



trap 'critical_error "${BASH_SOURCE[0]}: $LINENO: \"$BASH_COMMAND\" command failed with exit code $?."' ERR

if [[ "$(id -u)" != "0" ]]; then
    critical_error "You must execute the script as root."
fi

check_internet_connection
loadkeys "${KEYMAPS[@]}"
