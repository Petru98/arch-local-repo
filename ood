#!/usr/bin/python
import asyncio
import logging
import os
import sys

from pyalpm import vercmp
from cfg import (
    rootdir, log,
    Srcinfo, isvcs, iterpkgs,
    run_async, waitall, read_srcinfo_async,
)



def outofdate(pkgs, devel=None):
    pkgs = list(iterpkgs(pkgs, devel=devel))
    semaphore = asyncio.Semaphore(os.cpu_count())

    async def check_outofdate_async(pkgbase):
        pkgdir = f'{rootdir}/{pkgbase}'
        latestver_path = f'{pkgdir}/LATESTVER'

        if not os.path.exists(latestver_path):
            if not isvcs(pkgbase):
                log.warning(f'{latestver_path} does not exist.')

        else:
            async with semaphore:
                returncode, stdout = await run_async([latestver_path], check=False, cwd=pkgdir, stdout=asyncio.subprocess.PIPE)
                if returncode != 0:
                    log.error(f'{latestver_path} failed with exit code {returncode}.')

                else:
                    srcinfo = Srcinfo.parsestr(await read_srcinfo_async(pkgbase, cache=True))
                    version = f'{srcinfo["pkgver"]}-{srcinfo["pkgrel"]}'
                    indentation = ' ' * len(pkgbase)
                    newercount = 0
                    for v in stdout.strip().splitlines():
                        v = v.split(':', maxsplit=1)[-1]
                        if vercmp(v, version) > 0:
                            newercount += 1
                            if newercount == 1:
                                print(f'{pkgbase} {version}')
                            print(indentation, v)

    return asyncio.run(waitall(map(check_outofdate_async, pkgs)))



def main(args=sys.argv[1:]):
    import argparse
    argparser = argparse.ArgumentParser(description='', allow_abbrev=False)
    argparser.add_argument('--verbose', '-v', action='store_true', help='Show more info.')
    argparser.add_argument('pkgs', metavar='PKGS', nargs='*', help='Packages to check.')
    argparser.add_argument('--devel', action=argparse.BooleanOptionalAction, help='By default, VCS packages are included if PKGS is given, they are excluded otherwise. This overwrites the behaviour.')

    args = argparser.parse_args(args)
    if args.verbose:
        log.setLevel(logging.INFO)

    return outofdate(args.pkgs, args.devel)


if __name__ == '__main__':
    exit(main())
